;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Core XGBoost Library.\"\"\"" code nil nil [198 225])
            ("collections" include nil nil [226 244])
            ("collections.abc" include nil nil [294 329])
            ("ctypes" include nil nil [390 403])
            ("os" include nil nil [404 413])
            ("re" include nil nil [414 423])
            ("sys" include nil nil [424 434])
            ("warnings" include nil nil [435 450])
            ("json" include nil nil [451 462])
            ("numpy" include nil nil [464 482])
            ("scipy.sparse" include nil nil [483 502])
            ("" code nil nil [524 719])
            ("find_lib_path" include nil nil [734 754])
            ("c_bst_ulong" variable nil nil [822 851])
            ("XGBoostError" type
               (:documentation "Error thrown by xgboost trainer."
                :superclasses ("Exception")
                :type "class")
                nil [854 928])
            ("EarlyStopException" type
               (:documentation "Exception to signal early stopping.

    Parameters
    ----------
    best_iteration : int
        The best iteration stopped.
    "
                :superclasses ("Exception")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [1159 1201])
                            ("self" variable nil (reparse-symbol indented_block_body) [1210 1246]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1128 1132])
                            ("best_iteration" variable nil (reparse-symbol function_parameters) [1134 1148]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1115 1247]))                  
                :type "class")
                nil [930 1247])
            ("CallbackEnv" variable nil nil [1290 1492])
            ("from_pystr_to_cstr" function
               (:documentation "Convert a list of Python str to C pointer

    Parameters
    ----------
    data : list
        list of str
    "
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [1518 1522]))                  )
                nil [1495 1854])
            ("from_cstr_to_pystr" function
               (:documentation "Revert C pointer to Python str

    Parameters
    ----------
    data : ctypes pointer
        pointer to data
    length : ctypes pointer
        pointer to length of data
    "
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [1879 1883])
                    ("length" variable nil (reparse-symbol function_parameters) [1885 1891]))                  )
                nil [1856 2299])
            ("_expect" function
               (:documentation "Translate input error into string.

    Parameters
    ----------
    expectations: sequence
        a list of expected value.
    got:
        actual input

    Returns
    -------
    msg: str
    "
                :arguments 
                  ( ("expectations" variable nil (reparse-symbol function_parameters) [2313 2325])
                    ("got" variable nil (reparse-symbol function_parameters) [2327 2330]))                  )
                nil [2301 2747])
            ("_log_callback" function
               (:documentation "Redirect logs from native library into Python console"
                :arguments 
                  ( ("msg" variable nil (reparse-symbol function_parameters) [2767 2770]))                  )
                nil [2749 2876])
            ("_get_log_callback_func" function (:documentation "Wrap log_callback() method in ctypes callback type") nil [2878 3094])
            ("_load_lib" function (:documentation "Load xgboost Library.") nil [3096 4720])
            ("_LIB" variable nil nil [4758 4776])
            ("_check_call" function
               (:documentation "Check the return value of C API call

    This function will raise exception when error occurs.
    Wrap every API call with this function

    Parameters
    ----------
    ret : int
        return value from API calls
    "
                :arguments 
                  ( ("ret" variable nil (reparse-symbol function_parameters) [4795 4798]))                  )
                nil [4779 5112])
            ("ctypes2numpy" function
               (:documentation "Convert a ctypes pointer array to a numpy array."
                :arguments 
                  ( ("cptr" variable nil (reparse-symbol function_parameters) [5131 5135])
                    ("length" variable nil (reparse-symbol function_parameters) [5137 5143])
                    ("dtype" variable nil (reparse-symbol function_parameters) [5145 5150]))                  )
                nil [5114 5801])
            ("ctypes2cupy" function
               (:documentation "Convert a ctypes pointer array to a cupy array."
                :arguments 
                  ( ("cptr" variable nil (reparse-symbol function_parameters) [5819 5823])
                    ("length" variable nil (reparse-symbol function_parameters) [5825 5831])
                    ("dtype" variable nil (reparse-symbol function_parameters) [5833 5838]))                  )
                nil [5803 7005])
            ("ctypes2buffer" function
               (:documentation "Convert ctypes pointer to buffer type."
                :arguments 
                  ( ("cptr" variable nil (reparse-symbol function_parameters) [7025 7029])
                    ("length" variable nil (reparse-symbol function_parameters) [7031 7037]))                  )
                nil [7007 7389])
            ("c_str" function
               (:documentation "Convert a python string to cstring."
                :arguments 
                  ( ("string" variable nil (reparse-symbol function_parameters) [7401 7407]))                  )
                nil [7391 7507])
            ("c_array" function
               (:documentation "Convert a python string to c array."
                :arguments 
                  ( ("ctype" variable nil (reparse-symbol function_parameters) [7521 7526])
                    ("values" variable nil (reparse-symbol function_parameters) [7528 7534]))                  )
                nil [7509 7790])
            ("PANDAS_DTYPE_MAPPER" variable nil nil [7792 8086])
            ("_has_cuda_array_interface" function (:arguments 
              ( ("data" variable nil (reparse-symbol function_parameters) [8196 8200]))              ) nil [8166 8322])
            ("_maybe_pandas_data" function
               (:documentation "Extract internal data from pd.DataFrame for DMatrix data"
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [8347 8351])
                    ("feature_names" variable nil (reparse-symbol function_parameters) [8353 8366])
                    ("feature_types" variable nil (reparse-symbol function_parameters) [8368 8381])
                    ("meta" variable nil (reparse-symbol function_parameters) [8406 8410])
                    ("meta_type" variable nil (reparse-symbol function_parameters) [8417 8426]))                  )
                nil [8324 10131])
            ("_cudf_array_interfaces" function (:arguments 
              ( ("df" variable nil (reparse-symbol function_parameters) [10160 10162]))              ) nil [10133 10545])
            ("_maybe_cudf_dataframe" function
               (:documentation "Extract internal data from cudf.DataFrame for DMatrix data."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [10573 10577])
                    ("feature_names" variable nil (reparse-symbol function_parameters) [10579 10592])
                    ("feature_types" variable nil (reparse-symbol function_parameters) [10594 10607]))                  )
                nil [10547 11482])
            ("DT_TYPE_MAPPER" variable nil nil [11484 11548])
            ("DT_TYPE_MAPPER2" variable nil nil [11550 11612])
            ("_maybe_dt_data" function
               (:documentation "Validate feature names and types if data table"
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [11634 11638])
                    ("feature_names" variable nil (reparse-symbol function_parameters) [11640 11653])
                    ("feature_types" variable nil (reparse-symbol function_parameters) [11655 11668])
                    ("meta" variable nil (reparse-symbol function_parameters) [11689 11693])
                    ("meta_type" variable nil (reparse-symbol function_parameters) [11700 11709]))                  )
                nil [11615 13069])
            ("_is_dlpack" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [13085 13086]))              ) nil [13070 13153])
            ("_maybe_dlpack_data" function (:arguments 
              ( ("data" variable nil (reparse-symbol function_parameters) [13221 13225])
                ("feature_names" variable nil (reparse-symbol function_parameters) [13227 13240])
                ("feature_types" variable nil (reparse-symbol function_parameters) [13242 13255]))              ) nil [13198 13467])
            ("_convert_dataframes" function (:arguments 
              ( ("data" variable nil (reparse-symbol function_parameters) [13493 13497])
                ("feature_names" variable nil (reparse-symbol function_parameters) [13499 13512])
                ("feature_types" variable nil (reparse-symbol function_parameters) [13514 13527])
                ("meta" variable nil (reparse-symbol function_parameters) [13553 13557])
                ("meta_type" variable nil (reparse-symbol function_parameters) [13564 13573]))              ) nil [13469 14530])
            ("_maybe_np_slice" function (:arguments 
              ( ("data" variable nil (reparse-symbol function_parameters) [14552 14556])
                ("dtype" variable nil (reparse-symbol function_parameters) [14558 14563]))              ) nil [14532 15158])
            ("DMatrix" type
               (:documentation "Data Matrix used in XGBoost.

    DMatrix is a internal data structure that used by XGBoost
    which is optimized for both memory efficiency and training speed.
    You can construct DMatrix from numpy.arrays
    "
                :superclasses ("object")
                :members 
                  ( ("_feature_names" variable nil (reparse-symbol indented_block_body) [15413 15434])
                    ("_feature_types" variable nil (reparse-symbol indented_block_body) [15472 15493])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Parameters
        ----------
        data : os.PathLike/string/numpy.array/scipy.sparse/pd.DataFrame/
               dt.Frame/cudf.DataFrame/cupy.array/dlpack
            Data source of DMatrix.
            When data is string or os.PathLike type, it represents the path
            libsvm format txt file, csv file (by specifying uri parameter
            'path_to_csv?format=csv'), or binary file that xgboost can read
            from.
        label : list, numpy 1-D array or cudf.DataFrame, optional
            Label of the training data.
        missing : float, optional
            Value in the input data which needs to be present as a missing
            value. If None, defaults to np.nan.
        weight : list, numpy 1-D array or cudf.DataFrame , optional
            Weight for each instance.

            .. note:: For ranking task, weights are per-group.

                In ranking task, one weight is assigned to each group (not each
                data point). This is because we only care about the relative
                ordering of data points within each group, so it doesn't make
                sense to assign weights to individual data points.

        silent : boolean, optional
            Whether print messages during construction
        feature_names : list, optional
            Set names for features.
        feature_types : list, optional
            Set types for features.
        nthread : integer, optional
            Number of threads to use for loading data when parallelization is
            applicable. If -1, uses maximum threads available on the system.

        \"\"\"" code nil (reparse-symbol indented_block_body) [15743 17366])
                            ("if" code nil (reparse-symbol indented_block_body) [17441 17697])
                            ("if" code nil (reparse-symbol indented_block_body) [17706 17794])
                            ("data, feature_names, feature_types" code nil (reparse-symbol indented_block_body) [17803 17917])
                            ("np" code nil (reparse-symbol indented_block_body) [17972 17978])
                            ("1" code nil (reparse-symbol indented_block_body) [18033 18034])
                            ("if" code nil (reparse-symbol indented_block_body) [18044 19340])
                            ("if" code nil (reparse-symbol indented_block_body) [19349 19405])
                            ("if" code nil (reparse-symbol indented_block_body) [19413 19472])
                            ("if" code nil (reparse-symbol indented_block_body) [19480 19554])
                            ("self" variable nil (reparse-symbol indented_block_body) [19563 19597])
                            ("self" variable nil (reparse-symbol indented_block_body) [19606 19640]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15512 15516])
                            ("data" variable nil (reparse-symbol function_parameters) [15518 15522])
                            ("label" variable nil (reparse-symbol function_parameters) [15524 15529])
                            ("weight" variable nil (reparse-symbol function_parameters) [15536 15542])
                            ("base_margin" variable nil (reparse-symbol function_parameters) [15549 15560])
                            ("missing" variable nil (reparse-symbol function_parameters) [15584 15591])
                            ("silent" variable nil (reparse-symbol function_parameters) [15615 15621])
                            ("feature_names" variable nil (reparse-symbol function_parameters) [15646 15659])
                            ("feature_types" variable nil (reparse-symbol function_parameters) [15683 15696])
                            ("nthread" variable nil (reparse-symbol function_parameters) [15720 15727]))                          
                        :documentation "Parameters
        ----------
        data : os.PathLike/string/numpy.array/scipy.sparse/pd.DataFrame/
               dt.Frame/cudf.DataFrame/cupy.array/dlpack
            Data source of DMatrix.
            When data is string or os.PathLike type, it represents the path
            libsvm format txt file, csv file (by specifying uri parameter
            'path_to_csv?format=csv'), or binary file that xgboost can read
            from.
        label : list, numpy 1-D array or cudf.DataFrame, optional
            Label of the training data.
        missing : float, optional
            Value in the input data which needs to be present as a missing
            value. If None, defaults to np.nan.
        weight : list, numpy 1-D array or cudf.DataFrame , optional
            Weight for each instance.

            .. note:: For ranking task, weights are per-group.

                In ranking task, one weight is assigned to each group (not each
                data point). This is because we only care about the relative
                ordering of data points within each group, so it doesn't make
                sense to assign weights to individual data points.

        silent : boolean, optional
            Whether print messages during construction
        feature_names : list, optional
            Set names for features.
        feature_types : list, optional
            Set types for features.
        nthread : integer, optional
            Number of threads to use for loading data when parallelization is
            applicable. If -1, uses maximum threads available on the system.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15499 19641])
                    ("_init_from_csr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19665 19669])
                            ("csr" variable nil (reparse-symbol function_parameters) [19671 19674]))                          
                        :documentation "Initialize data from a CSR matrix.")
                        (reparse-symbol indented_block_body) [19646 20316])
                    ("_init_from_csc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20340 20344])
                            ("csc" variable nil (reparse-symbol function_parameters) [20346 20349]))                          
                        :documentation "Initialize data from a CSC matrix.")
                        (reparse-symbol indented_block_body) [20321 20991])
                    ("_init_from_npy2d" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21017 21021])
                            ("mat" variable nil (reparse-symbol function_parameters) [21023 21026])
                            ("missing" variable nil (reparse-symbol function_parameters) [21028 21035])
                            ("nthread" variable nil (reparse-symbol function_parameters) [21037 21044]))                          
                        :documentation "Initialize data from a 2-D numpy matrix.

        If ``mat`` does not have ``order='C'`` (aka row-major) or is
        not contiguous, a temporary copy will be made.

        If ``mat`` does not have ``dtype=numpy.float32``, a temporary copy will
        be made.

        So there could be as many as two temporary data copies; be mindful of
        input layout and type if memory use is a concern.

        ")
                        (reparse-symbol indented_block_body) [20996 22284])
                    ("_init_from_dt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22307 22311])
                            ("data" variable nil (reparse-symbol function_parameters) [22313 22317])
                            ("nthread" variable nil (reparse-symbol function_parameters) [22319 22326]))                          
                        :documentation "Initialize data from a datatable Frame.")
                        (reparse-symbol indented_block_body) [22289 23566])
                    ("_init_from_array_interface_columns" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23610 23614])
                            ("df" variable nil (reparse-symbol function_parameters) [23616 23618])
                            ("missing" variable nil (reparse-symbol function_parameters) [23620 23627])
                            ("nthread" variable nil (reparse-symbol function_parameters) [23629 23636]))                          
                        :documentation "Initialize DMatrix from columnar memory format.")
                        (reparse-symbol indented_block_body) [23571 24048])
                    ("_init_from_array_interface" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24084 24088])
                            ("data" variable nil (reparse-symbol function_parameters) [24090 24094])
                            ("missing" variable nil (reparse-symbol function_parameters) [24096 24103])
                            ("nthread" variable nil (reparse-symbol function_parameters) [24105 24112]))                          
                        :documentation "Initialize DMatrix from cupy ndarray.")
                        (reparse-symbol indented_block_body) [24053 24684])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24701 24705]))                          )
                        (reparse-symbol indented_block_body) [24689 24848])
                    ("get_float_info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24872 24876])
                            ("field" variable nil (reparse-symbol function_parameters) [24878 24883]))                          
                        :documentation "Get float property from the DMatrix.

        Parameters
        ----------
        field: str
            The field name of the information

        Returns
        -------
        info : array
            a numpy array of float information of the data
        ")
                        (reparse-symbol indented_block_body) [24853 25557])
                    ("get_uint_info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25580 25584])
                            ("field" variable nil (reparse-symbol function_parameters) [25586 25591]))                          
                        :documentation "Get unsigned integer property from the DMatrix.

        Parameters
        ----------
        field: str
            The field name of the information

        Returns
        -------
        info : array
            a numpy array of unsigned integer information of the data
        ")
                        (reparse-symbol indented_block_body) [25562 26281])
                    ("set_float_info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26305 26309])
                            ("field" variable nil (reparse-symbol function_parameters) [26311 26316])
                            ("data" variable nil (reparse-symbol function_parameters) [26318 26322]))                          
                        :documentation "Set float type property into the DMatrix.

        Parameters
        ----------
        field: str
            The field name of the information

        data: numpy array
            The array of data to be set
        ")
                        (reparse-symbol indented_block_body) [26286 27042])
                    ("set_float_info_npy2d" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27072 27076])
                            ("field" variable nil (reparse-symbol function_parameters) [27078 27083])
                            ("data" variable nil (reparse-symbol function_parameters) [27085 27089]))                          
                        :documentation "Set float type property into the DMatrix
           for numpy 2d array input

        Parameters
        ----------
        field: str
            The field name of the information

        data: numpy array
            The array of data to be set
        ")
                        (reparse-symbol indented_block_body) [27047 27729])
                    ("set_uint_info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27752 27756])
                            ("field" variable nil (reparse-symbol function_parameters) [27758 27763])
                            ("data" variable nil (reparse-symbol function_parameters) [27765 27769]))                          
                        :documentation "Set uint type property into the DMatrix.

        Parameters
        ----------
        field: str
            The field name of the information

        data: numpy array
            The array of data to be set
        ")
                        (reparse-symbol indented_block_body) [27734 28460])
                    ("set_interface_info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28488 28492])
                            ("field" variable nil (reparse-symbol function_parameters) [28494 28499])
                            ("data" variable nil (reparse-symbol function_parameters) [28501 28505]))                          
                        :documentation "Set info type property into DMatrix.")
                        (reparse-symbol indented_block_body) [28465 29198])
                    ("save_binary" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29219 29223])
                            ("fname" variable nil (reparse-symbol function_parameters) [29225 29230])
                            ("silent" variable nil (reparse-symbol function_parameters) [29232 29238]))                          
                        :documentation "Save DMatrix to an XGBoost buffer.  Saved binary can be later loaded
        by providing the path to :py:func:`xgboost.DMatrix` as input.

        Parameters
        ----------
        fname : string or os.PathLike
            Name of the output buffer file.
        silent : bool (optional; default: True)
            If set, the output is suppressed.
        ")
                        (reparse-symbol indented_block_body) [29203 29819])
                    ("set_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29838 29842])
                            ("label" variable nil (reparse-symbol function_parameters) [29844 29849]))                          
                        :documentation "Set label of dmatrix

        Parameters
        ----------
        label: array like
            The label information to be set into DMatrix
        ")
                        (reparse-symbol indented_block_body) [29824 30177])
                    ("set_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30197 30201])
                            ("weight" variable nil (reparse-symbol function_parameters) [30203 30209]))                          
                        :documentation "Set weight of each instance.

        Parameters
        ----------
        weight : array like
            Weight for each data point

            .. note:: For ranking task, weights are per-group.

                In ranking task, one weight is assigned to each group (not each
                data point). This is because we only care about the relative
                ordering of data points within each group, so it doesn't make
                sense to assign weights to individual data points.

        ")
                        (reparse-symbol indented_block_body) [30182 30902])
                    ("set_base_margin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30927 30931])
                            ("margin" variable nil (reparse-symbol function_parameters) [30933 30939]))                          
                        :documentation "Set base margin of booster to start from.

        This can be used to specify a prediction value of existing model to be
        base_margin However, remember margin is needed, instead of transformed
        prediction e.g. for logistic regression: need to put in value before
        logistic transformation see also example/demo.py

        Parameters
        ----------
        margin: array like
            Prediction margin of each datapoint

        ")
                        (reparse-symbol indented_block_body) [30907 31589])
                    ("set_group" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31608 31612])
                            ("group" variable nil (reparse-symbol function_parameters) [31614 31619]))                          
                        :documentation "Set group size of DMatrix (used for ranking).

        Parameters
        ----------
        group : array like
            Group size of each group
        ")
                        (reparse-symbol indented_block_body) [31594 31952])
                    ("get_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31971 31975]))                          
                        :documentation "Get the label of the DMatrix.

        Returns
        -------
        label : array
        ")
                        (reparse-symbol indented_block_body) [31957 32130])
                    ("get_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32150 32154]))                          
                        :documentation "Get the weight of the DMatrix.

        Returns
        -------
        weight : array
        ")
                        (reparse-symbol indented_block_body) [32135 32312])
                    ("get_base_margin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32337 32341]))                          
                        :documentation "Get the base margin of the DMatrix.

        Returns
        -------
        base_margin : float
        ")
                        (reparse-symbol indented_block_body) [32317 32514])
                    ("num_row" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32531 32535]))                          
                        :documentation "Get the number of rows in the DMatrix.

        Returns
        -------
        number of rows : int
        ")
                        (reparse-symbol indented_block_body) [32519 32830])
                    ("num_col" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32847 32851]))                          
                        :documentation "Get the number of columns (features) in the DMatrix.

        Returns
        -------
        number of columns : int
        ")
                        (reparse-symbol indented_block_body) [32835 33163])
                    ("slice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33178 33182])
                            ("rindex" variable nil (reparse-symbol function_parameters) [33184 33190])
                            ("allow_groups" variable nil (reparse-symbol function_parameters) [33192 33204]))                          
                        :documentation "Slice the DMatrix and return a new DMatrix that only contains `rindex`.

        Parameters
        ----------
        rindex : list
            List of indices to be selected.
        allow_groups : boolean
            Allow slicing of a matrix with a groups attribute

        Returns
        -------
        res : DMatrix
            A new DMatrix containing only selected indices.
        ")
                        (reparse-symbol indented_block_body) [33168 34179])
                    ("feature_names" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34216 34220]))                          
                        :documentation "Get feature names (column labels).

        Returns
        -------
        feature_names : list or None
        ")
                        (reparse-symbol indented_block_body) [34184 34545])
                    ("feature_types" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34582 34586]))                          
                        :documentation "Get feature types (column types).

        Returns
        -------
        feature_types : list or None
        ")
                        (reparse-symbol indented_block_body) [34550 34751])
                    ("feature_names" function
                       (:parent "dummy"
                        :decorators 
                          ( ("feature_names.setter" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34800 34804])
                            ("feature_names" variable nil (reparse-symbol function_parameters) [34806 34819]))                          
                        :documentation "Set feature names (column labels).

        Parameters
        ----------
        feature_names : list or None
            Labels for features. None will reset existing feature names
        ")
                        (reparse-symbol indented_block_body) [34756 36144])
                    ("feature_types" function
                       (:parent "dummy"
                        :decorators 
                          ( ("feature_types.setter" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36193 36197])
                            ("feature_types" variable nil (reparse-symbol function_parameters) [36199 36212]))                          
                        :documentation "Set feature types (column types).

        This is for displaying the results and unrelated
        to the learning process.

        Parameters
        ----------
        feature_types : list or None
            Labels for features. None will reset existing feature names
        ")
                        (reparse-symbol indented_block_body) [36149 37621]))                  
                :type "class")
                nil [15160 37621])
            ("DeviceQuantileDMatrix" type
               (:documentation "Device memory Data Matrix used in XGBoost for training with tree_method='gpu_hist'. Do not
    use this for test/validation tasks as some information may be lost in quantisation. This
    DMatrix is primarily designed to save memory in training from device memory inputs by
    avoiding intermediate storage. Implementation does not currently consider weights in
    quantisation process(unlike DMatrix). Set max_bin to control the number of bins during
    quantisation.

    You can construct DeviceQuantileDMatrix from cupy/cudf/dlpack.

    .. versionadded:: 1.1.0

    "
                :superclasses ("DMatrix")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [38508 38530])
                            ("if" code nil (reparse-symbol indented_block_body) [38539 38785])
                            ("super" code nil (reparse-symbol indented_block_body) [38794 39101]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38264 38268])
                            ("data" variable nil (reparse-symbol function_parameters) [38270 38274])
                            ("label" variable nil (reparse-symbol function_parameters) [38276 38281])
                            ("weight" variable nil (reparse-symbol function_parameters) [38288 38294])
                            ("base_margin" variable nil (reparse-symbol function_parameters) [38301 38312])
                            ("missing" variable nil (reparse-symbol function_parameters) [38336 38343])
                            ("silent" variable nil (reparse-symbol function_parameters) [38367 38373])
                            ("feature_names" variable nil (reparse-symbol function_parameters) [38398 38411])
                            ("feature_types" variable nil (reparse-symbol function_parameters) [38435 38448])
                            ("nthread" variable nil (reparse-symbol function_parameters) [38472 38479])
                            ("max_bin" variable nil (reparse-symbol function_parameters) [38486 38493]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [38251 39102])
                    ("_init_from_array_interface_columns" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39146 39150])
                            ("df" variable nil (reparse-symbol function_parameters) [39152 39154])
                            ("missing" variable nil (reparse-symbol function_parameters) [39156 39163])
                            ("nthread" variable nil (reparse-symbol function_parameters) [39165 39172]))                          
                        :documentation "Initialize DMatrix from columnar memory format.")
                        (reparse-symbol indented_block_body) [39107 39727])
                    ("_init_from_array_interface" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39763 39767])
                            ("data" variable nil (reparse-symbol function_parameters) [39769 39773])
                            ("missing" variable nil (reparse-symbol function_parameters) [39775 39782])
                            ("nthread" variable nil (reparse-symbol function_parameters) [39784 39791]))                          
                        :documentation "Initialize DMatrix from cupy ndarray.")
                        (reparse-symbol indented_block_body) [39732 40506]))                  
                :type "class")
                nil [37623 40506])
            ("Booster" type
               (:documentation "A Booster of XGBoost.

    Booster is the model of xgboost, that contains low level routines for
    training, prediction and evaluation.
    "
                :superclasses ("object")
                :members 
                  ( ("feature_names" variable nil (reparse-symbol indented_block_body) [40735 40755])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ----------
        params : dict
            Parameters for boosters.
        cache : list
            List of cache items.
        model_file : string or os.PathLike
            Path to the model file.
        \"\"\"" code nil (reparse-symbol indented_block_body) [40868 41113])
                            ("for" code nil (reparse-symbol indented_block_body) [41122 41310])
                            ("dmats" variable nil (reparse-symbol indented_block_body) [41319 41378])
                            ("self" variable nil (reparse-symbol indented_block_body) [41387 41418])
                            ("_check_call" code nil (reparse-symbol indented_block_body) [41427 41560])
                            ("params" code nil (reparse-symbol indented_block_body) [41569 41590])
                            ("if" code nil (reparse-symbol indented_block_body) [41599 41748])
                            ("self" code nil (reparse-symbol indented_block_body) [41757 41785])
                            ("if" code nil (reparse-symbol indented_block_body) [41794 41940])
                            ("if" code nil (reparse-symbol indented_block_body) [41948 42783]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40774 40778])
                            ("params" variable nil (reparse-symbol function_parameters) [40780 40786])
                            ("cache" variable nil (reparse-symbol function_parameters) [40793 40798])
                            ("model_file" variable nil (reparse-symbol function_parameters) [40803 40813]))                          
                        :documentation "
        Parameters
        ----------
        params : dict
            Parameters for boosters.
        cache : list
            List of cache items.
        model_file : string or os.PathLike
            Path to the model file.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [40761 42783])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42800 42804]))                          )
                        (reparse-symbol indented_block_body) [42788 42959])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42981 42985]))                          )
                        (reparse-symbol indented_block_body) [42964 43573])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43595 43599])
                            ("state" variable nil (reparse-symbol function_parameters) [43601 43606]))                          )
                        (reparse-symbol indented_block_body) [43578 44214])
                    ("save_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44235 44239]))                          )
                        (reparse-symbol indented_block_body) [44219 44671])
                    ("load_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44692 44696])
                            ("config" variable nil (reparse-symbol function_parameters) [44698 44704]))                          )
                        (reparse-symbol indented_block_body) [44676 44951])
                    ("__copy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44969 44973]))                          )
                        (reparse-symbol indented_block_body) [44956 45015])
                    ("__deepcopy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45037 45041])
                            ("_" variable nil (reparse-symbol function_parameters) [45043 45044]))                          )
                        (reparse-symbol indented_block_body) [45020 45127])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45141 45145]))                          
                        :documentation "Copy the booster object.

        Returns
        -------
        booster: `Booster`
            a copied booster model
        ")
                        (reparse-symbol indented_block_body) [45132 45322])
                    ("load_rabit_checkpoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45353 45357]))                          
                        :documentation "Initialize the model by load from rabit checkpoint.

        Returns
        -------
        version: integer
            The version number of the model.
        ")
                        (reparse-symbol indented_block_body) [45327 45704])
                    ("save_rabit_checkpoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45735 45739]))                          
                        :documentation "Save the current booster to rabit checkpoint.")
                        (reparse-symbol indented_block_body) [45709 45870])
                    ("attr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45884 45888])
                            ("key" variable nil (reparse-symbol function_parameters) [45890 45893]))                          
                        :documentation "Get attribute string from the Booster.

        Parameters
        ----------
        key : str
            The key to get attribute from.

        Returns
        -------
        value : str
            The attribute value of the key, returns None if attribute do not exist.
        ")
                        (reparse-symbol indented_block_body) [45875 46471])
                    ("attributes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46491 46495]))                          
                        :documentation "Get attributes stored in the Booster as a dictionary.

        Returns
        -------
        result : dictionary of  attribute_name: attribute_value pairs of strings.
            Returns an empty dict if there's no attributes.
        ")
                        (reparse-symbol indented_block_body) [46476 47134])
                    ("set_attr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47152 47156])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [47158 47166]))                          
                        :documentation "Set the attribute of the Booster.

        Parameters
        ----------
        **kwargs
            The attributes to set. Setting a value to None deletes an attribute.
        ")
                        (reparse-symbol indented_block_body) [47139 47709])
                    ("set_param" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47728 47732])
                            ("params" variable nil (reparse-symbol function_parameters) [47734 47740])
                            ("value" variable nil (reparse-symbol function_parameters) [47742 47747]))                          
                        :documentation "Set parameters into the Booster.

        Parameters
        ----------
        params: dict/list/str
           list of key,value pairs, dict of key to value or simply str key
        value: optional
           value of the specified parameter, when params is str key
        ")
                        (reparse-symbol indented_block_body) [47714 48440])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48456 48460])
                            ("dtrain" variable nil (reparse-symbol function_parameters) [48462 48468])
                            ("iteration" variable nil (reparse-symbol function_parameters) [48470 48479])
                            ("fobj" variable nil (reparse-symbol function_parameters) [48481 48485]))                          
                        :documentation "Update for one iteration, with objective function calculated
        internally.  This function should not be called directly by users.

        Parameters
        ----------
        dtrain : DMatrix
            Training data.
        iteration : int
            Current iteration number.
        fobj : function
            Customized objective function.

        ")
                        (reparse-symbol indented_block_body) [48445 49475])
                    ("boost" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49490 49494])
                            ("dtrain" variable nil (reparse-symbol function_parameters) [49496 49502])
                            ("grad" variable nil (reparse-symbol function_parameters) [49504 49508])
                            ("hess" variable nil (reparse-symbol function_parameters) [49510 49514]))                          
                        :documentation "Boost the booster for one iteration, with customized gradient
        statistics.  Like :func:`xgboost.core.Booster.update`, this
        function should not be called directly by users.

        Parameters
        ----------
        dtrain : DMatrix
            The training DMatrix.
        grad : list
            The first order of gradient.
        hess : list
            The second order of gradient.

        ")
                        (reparse-symbol indented_block_body) [49480 50559])
                    ("eval_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50577 50581])
                            ("evals" variable nil (reparse-symbol function_parameters) [50583 50588])
                            ("iteration" variable nil (reparse-symbol function_parameters) [50590 50599])
                            ("feval" variable nil (reparse-symbol function_parameters) [50603 50608]))                          
                        :documentation "Evaluate a set of data.

        Parameters
        ----------
        evals : list of tuples (DMatrix, string)
            List of items to be evaluated.
        iteration : int
            Current iteration.
        feval : function
            Custom evaluation function.

        Returns
        -------
        result: str
            Evaluation result string.
        ")
                        (reparse-symbol indented_block_body) [50564 52415])
                    ("eval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52429 52433])
                            ("data" variable nil (reparse-symbol function_parameters) [52435 52439])
                            ("name" variable nil (reparse-symbol function_parameters) [52441 52445])
                            ("iteration" variable nil (reparse-symbol function_parameters) [52454 52463]))                          
                        :documentation "Evaluate the model on mat.

        Parameters
        ----------
        data : DMatrix
            The dmatrix storing the input.

        name : str, optional
            The name of the dataset.

        iteration : int, optional
            The current iteration number.

        Returns
        -------
        result: str
            Evaluation result string.
        ")
                        (reparse-symbol indented_block_body) [52420 52952])
                    ("predict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53014 53018])
                            ("data" variable nil (reparse-symbol function_parameters) [53036 53040])
                            ("output_margin" variable nil (reparse-symbol function_parameters) [53058 53071])
                            ("ntree_limit" variable nil (reparse-symbol function_parameters) [53095 53106])
                            ("pred_leaf" variable nil (reparse-symbol function_parameters) [53126 53135])
                            ("pred_contribs" variable nil (reparse-symbol function_parameters) [53159 53172])
                            ("approx_contribs" variable nil (reparse-symbol function_parameters) [53196 53211])
                            ("pred_interactions" variable nil (reparse-symbol function_parameters) [53235 53252])
                            ("validate_features" variable nil (reparse-symbol function_parameters) [53276 53293])
                            ("training" variable nil (reparse-symbol function_parameters) [53316 53324]))                          
                        :documentation "Predict with data.

        .. note:: This function is not thread safe except for ``gbtree``
                  booster.

          For ``gbtree`` booster, the thread safety is guaranteed by locks.
          For lock free prediction use ``inplace_predict`` instead.  Also, the
          safety does not hold when used in conjunction with other methods.

          When using booster other than ``gbtree``, predict can only be called
          from one thread.  If you want to run prediction using multiple
          thread, call ``bst.copy()`` to make copies of model object and then
          call ``predict()``.

        Parameters
        ----------
        data : DMatrix
            The dmatrix storing the input.

        output_margin : bool
            Whether to output the raw untransformed margin value.

        ntree_limit : int
            Limit number of trees in the prediction; defaults to 0 (use all
            trees).

        pred_leaf : bool
            When this option is on, the output will be a matrix of (nsample,
            ntrees) with each record indicating the predicted leaf index of
            each sample in each tree.  Note that the leaf index of a tree is
            unique per tree, so you may find leaf 1 in both tree 1 and tree 0.

        pred_contribs : bool
            When this is True the output will be a matrix of size (nsample,
            nfeats + 1) with each record indicating the feature contributions
            (SHAP values) for that prediction. The sum of all feature
            contributions is equal to the raw untransformed margin value of the
            prediction. Note the final column is the bias term.

        approx_contribs : bool
            Approximate the contributions of each feature

        pred_interactions : bool
            When this is True the output will be a matrix of size (nsample,
            nfeats + 1, nfeats + 1) indicating the SHAP interaction values for
            each pair of features. The sum of each row (or column) of the
            interaction values equals the corresponding SHAP value (from
            pred_contribs), and the sum of the entire matrix equals the raw
            untransformed margin value of the prediction. Note the last row and
            column correspond to the bias term.

        validate_features : bool
            When this is True, validate that the Booster's and data's
            feature_names are identical.  Otherwise, it is assumed that the
            feature_names are the same.

        training : bool
            Whether the prediction value is used for training.  This can effect
            `dart` booster, which performs dropouts during training iterations.

            .. versionadded:: 1.0.0

        .. note:: Using ``predict()`` with DART booster

          If the booster object is DART type, ``predict()`` will not perform
          dropouts, i.e. all the trees will be evaluated.  If you want to
          obtain result with dropouts, provide `training=True`.

        Returns
        -------
        prediction : numpy array

        ")
                        (reparse-symbol indented_block_body) [53002 58738])
                    ("inplace_predict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58763 58767])
                            ("data" variable nil (reparse-symbol function_parameters) [58769 58773])
                            ("iteration_range" variable nil (reparse-symbol function_parameters) [58775 58790])
                            ("predict_type" variable nil (reparse-symbol function_parameters) [58823 58835])
                            ("missing" variable nil (reparse-symbol function_parameters) [58845 58852]))                          )
                        (reparse-symbol indented_block_body) [58743 64731])
                    ("save_model" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64751 64755])
                            ("fname" variable nil (reparse-symbol function_parameters) [64757 64762]))                          
                        :documentation "Save the model to a file.

        The model is saved in an XGBoost internal format which is universal
        among the various XGBoost interfaces. Auxiliary attributes of the
        Python Booster object (such as feature_names) will not be saved.  To
        preserve all attributes, pickle the Booster object.

        Parameters
        ----------
        fname : string or os.PathLike
            Output file name

        ")
                        (reparse-symbol indented_block_body) [64736 65475])
                    ("save_raw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65493 65497]))                          
                        :documentation "Save the model to a in memory buffer representation

        Returns
        -------
        a in memory buffer representation of the model
        ")
                        (reparse-symbol indented_block_body) [65480 65984])
                    ("load_model" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66004 66008])
                            ("fname" variable nil (reparse-symbol function_parameters) [66010 66015]))                          
                        :documentation "Load the model from a file or bytearray. Path to file can be local
        or as an URI.

        The model is loaded from an XGBoost format which is universal among the
        various XGBoost interfaces. Auxiliary attributes of the Python Booster
        object (such as feature_names) will not be loaded.  To preserve all
        attributes, pickle the Booster object.

        Parameters
        ----------
        fname : string, os.PathLike, or a memory buffer
            Input file name or memory buffer(see also save_raw)

        ")
                        (reparse-symbol indented_block_body) [65989 67226])
                    ("dump_model" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67246 67250])
                            ("fout" variable nil (reparse-symbol function_parameters) [67252 67256])
                            ("fmap" variable nil (reparse-symbol function_parameters) [67258 67262])
                            ("with_stats" variable nil (reparse-symbol function_parameters) [67267 67277])
                            ("dump_format" variable nil (reparse-symbol function_parameters) [67285 67296]))                          
                        :documentation "Dump model into a text or JSON file.

        Parameters
        ----------
        fout : string or os.PathLike
            Output file name.
        fmap : string or os.PathLike, optional
            Name of the file containing feature map names.
        with_stats : bool, optional
            Controls whether the split statistics are output.
        dump_format : string, optional
            Format of model dump file. Can be 'text' or 'json'.
        ")
                        (reparse-symbol indented_block_body) [67231 68453])
                    ("get_dump" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68471 68475])
                            ("fmap" variable nil (reparse-symbol function_parameters) [68477 68481])
                            ("with_stats" variable nil (reparse-symbol function_parameters) [68486 68496])
                            ("dump_format" variable nil (reparse-symbol function_parameters) [68504 68515]))                          
                        :documentation "Returns the model dump as a list of strings.

        Parameters
        ----------
        fmap : string or os.PathLike, optional
            Name of the file containing feature map names.
        with_stats : bool, optional
            Controls whether the split statistics are output.
        dump_format : string, optional
            Format of model dump. Can be 'text', 'json' or 'dot'.
        ")
                        (reparse-symbol indented_block_body) [68458 70440])
                    ("get_fscore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70460 70464])
                            ("fmap" variable nil (reparse-symbol function_parameters) [70466 70470]))                          
                        :documentation "Get feature importance of each feature.

        .. note:: Feature importance is defined only for tree boosters

            Feature importance is only defined when the decision tree model is chosen as base
            learner (`booster=gbtree`). It is not defined for other base learner types, such
            as linear learners (`booster=gblinear`).

        .. note:: Zero-importance features will not be included

           Keep in mind that this function does not include zero-importance feature, i.e.
           those features that have not been used in any split conditions.

        Parameters
        ----------
        fmap: str or os.PathLike (optional)
           The name of feature map file
        ")
                        (reparse-symbol indented_block_body) [70445 71269])
                    ("get_score" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71288 71292])
                            ("fmap" variable nil (reparse-symbol function_parameters) [71294 71298])
                            ("importance_type" variable nil (reparse-symbol function_parameters) [71303 71318]))                          
                        :documentation "Get feature importance of each feature.
        Importance type can be defined as:

        * 'weight': the number of times a feature is used to split the data across all trees.
        * 'gain': the average gain across all splits the feature is used in.
        * 'cover': the average coverage across all splits the feature is used in.
        * 'total_gain': the total gain across all splits the feature is used in.
        * 'total_cover': the total coverage across all splits the feature is used in.

        .. note:: Feature importance is defined only for tree boosters

            Feature importance is only defined when the decision tree model is chosen as base
            learner (`booster=gbtree`). It is not defined for other base learner types, such
            as linear learners (`booster=gblinear`).

        Parameters
        ----------
        fmap: str or os.PathLike (optional)
           The name of feature map file.
        importance_type: str, default 'weight'
            One of the importance types defined above.
        ")
                        (reparse-symbol indented_block_body) [71274 75468])
                    ("trees_to_dataframe" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75496 75500])
                            ("fmap" variable nil (reparse-symbol function_parameters) [75502 75506]))                          
                        :documentation "Parse a boosted tree model text dump into a pandas DataFrame structure.

        This feature is only defined when the decision tree model is chosen as base
        learner (`booster in {gbtree, dart}`). It is not defined for other base learner
        types, such as linear learners (`booster=gblinear`).

        Parameters
        ----------
        fmap: str or os.PathLike (optional)
           The name of feature map file.
        ")
                        (reparse-symbol indented_block_body) [75473 79063])
                    ("_validate_features" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79091 79095])
                            ("data" variable nil (reparse-symbol function_parameters) [79097 79101]))                          
                        :documentation "
        Validate Booster and data's feature_names are identical.
        Set feature_names and feature_types from DMatrix
        ")
                        (reparse-symbol indented_block_body) [79068 80223])
                    ("get_split_value_histogram" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80258 80262])
                            ("feature" variable nil (reparse-symbol function_parameters) [80264 80271])
                            ("fmap" variable nil (reparse-symbol function_parameters) [80273 80277])
                            ("bins" variable nil (reparse-symbol function_parameters) [80282 80286])
                            ("as_pandas" variable nil (reparse-symbol function_parameters) [80327 80336]))                          
                        :documentation "Get split value histogram of a feature

        Parameters
        ----------
        feature: str
            The name of the feature.
        fmap: str or os.PathLike (optional)
            The name of feature map file.
        bin: int, default None
            The maximum number of bins.
            Number of bins equals number of unique split values n_unique,
            if bins == None or bins > n_unique.
        as_pandas: bool, default True
            Return pd.DataFrame when pandas is installed.
            If False or pandas is not installed, return numpy ndarray.

        Returns
        -------
        a histogram of used splitting values for the specified feature
        either as numpy array or pandas DataFrame.
        ")
                        (reparse-symbol indented_block_body) [80228 81928]))                  
                :type "class")
                nil [40508 81928]))          
      :file "core.py"
      :pointmax 81928
      :fsize 81927
      :lastmodtime '(24373 6249 408109 664000)
      :unmatched-syntax '((NAME 40180 . 40187) (IF 40198 . 40200) (ELSE 40221 . 40225) (NAME 40119 . 40126) (IF 40137 . 40139) (ELSE 40160 . 40164) (NAME 39393 . 39400) (IF 39411 . 39413) (ELSE 39434 . 39438) (NAME 39332 . 39339) (IF 39350 . 39352) (ELSE 39373 . 39377) (NAME 17987 . 17994) (IF 18005 . 18007) (ELSE 18028 . 18032) (NAME 17926 . 17933) (IF 17944 . 17946) (ELSE 17967 . 17971) (NAME 10003 . 10008) (IF 10021 . 10023) (ELSE 10034 . 10038) (INDENT_BLOCK 3818 . 3879) (NEWLINE 3817 . 3818) (COLON 3816 . 3817) (FINALLY 3809 . 3816) (INDENT_BLOCK 3739 . 3801) (NEWLINE 3738 . 3739) (COLON 3737 . 3738) (TRY 3417 . 3420) (AS 3733 . 3735) (FROM 720 . 724) (PERIOD 725 . 726) (FROM 504 . 508) (PERIOD 509 . 510))))
  :file "!usr!local!lib!python3.8!dist-packages!xgboost!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
